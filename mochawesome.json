{
  "stats": {
    "suites": 14,
    "tests": 68,
    "passes": 67,
    "pending": 0,
    "failures": 1,
    "start": "2023-02-21T15:30:24.926Z",
    "end": "2023-02-21T15:34:33.286Z",
    "duration": 104546,
    "testsRegistered": 68,
    "passPercent": 98.52941176470588,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "80194ea4-29f5-4299-854f-ca5de7fdbc48",
      "title": "",
      "fullFile": "cypress/e2e/1-getting-started/login.cy.js",
      "file": "cypress/e2e/1-getting-started/login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e2889759-5609-4424-b82f-5fda84a160a7",
          "title": "Login Page tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Login with valid data",
              "fullTitle": "Login Page tests Login with valid data",
              "timedOut": null,
              "duration": 4809,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_loginPage.loginPage.login(Cypress.env('validEmail'), Cypress.env('validPassword'));",
              "err": {},
              "uuid": "ac146967-a2a7-475d-acff-86a19cd2e4ce",
              "parentUUID": "e2889759-5609-4424-b82f-5fda84a160a7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ac146967-a2a7-475d-acff-86a19cd2e4ce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4809,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e65dce28-8760-4d3f-bbe9-3d26f8ed2eda",
      "title": "",
      "fullFile": "cypress/e2e/1-getting-started/newArticle.cy.js",
      "file": "cypress/e2e/1-getting-started/newArticle.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a082cf8b-5eaa-483f-996b-3da47ad331c0",
          "title": "New Article tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "publish and delete published article via cypress api",
              "fullTitle": "New Article tests publish and delete published article via cypress api",
              "timedOut": null,
              "duration": 8361,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postTitle = 'Post title test' + Math.floor(Math.random() * 100);\nconst bodyRequest = {\n  \"article\": {\n    \"tagList\": [],\n    \"title\": postTitle,\n    \"description\": \"api testing\",\n    \"body\": \"via postman and cypress\"\n  }\n};\ncy.get('@token').then(token => {\n  cy.request({\n    url: Cypress.env(\"apiUrl\") + '/api/articles/',\n    headers: {\n      'Authorization': 'Token ' + token\n    },\n    method: 'POST',\n    body: bodyRequest\n  }).then(response => {\n    expect(response.status).to.equal(200);\n  });\n  cy.contains('Global Feed').click();\n  cy.get('.article-preview').first().click();\n  cy.get('.article-actions .btn-outline-danger').click();\n  cy.contains('Global Feed').click();\n  cy.request({\n    url: Cypress.env(\"apiUrl\") + '/api/articles?limit=10&offset=0',\n    headers: {\n      'Authorization': 'Token ' + token\n    },\n    method: 'GET'\n  }).its('body').then(body => {\n    cy.log(body);\n    expect(body.articles[0].title).not.to.equal(postTitle);\n  });\n});",
              "err": {},
              "uuid": "7104e0dd-87e2-475c-bb96-6db7f8939dd9",
              "parentUUID": "a082cf8b-5eaa-483f-996b-3da47ad331c0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7104e0dd-87e2-475c-bb96-6db7f8939dd9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8361,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "c0c06c88-00ad-4fb3-99e0-01007fc2a9cf",
      "title": "",
      "fullFile": "cypress/e2e/1-getting-started/register.cy.js",
      "file": "cypress/e2e/1-getting-started/register.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e8a9fa11-d99b-4f47-bec6-b1bba4acd728",
          "title": "Login Page tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Register with valid data",
              "fullTitle": "Login Page tests Register with valid data",
              "timedOut": null,
              "duration": 5410,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_registerPage.regPage.register(Cypress.env('validUserName'), Cypress.env('validEmail'), Cypress.env('validPassword'));",
              "err": {},
              "uuid": "55c79497-5817-4657-8e6e-9642638a171f",
              "parentUUID": "e8a9fa11-d99b-4f47-bec6-b1bba4acd728",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "55c79497-5817-4657-8e6e-9642638a171f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5410,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "894cd80c-e336-4a21-8122-ef368db48229",
      "title": "",
      "fullFile": "cypress/e2e/1-getting-started/tags.cy.js",
      "file": "cypress/e2e/1-getting-started/tags.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "30668f65-d165-4b6e-8a2d-dd095fbdbb71",
          "title": "Tags tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": " Verify popular tags display",
              "fullTitle": "Tags tests  Verify popular tags display",
              "timedOut": null,
              "duration": 5716,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.tag-list').should('contain', 'cypress').should('contain', 'automation').should('contain', 'testing').should('contain', 'project');",
              "err": {},
              "uuid": "7258739d-b973-4652-b5ae-9470d3876668",
              "parentUUID": "30668f65-d165-4b6e-8a2d-dd095fbdbb71",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7258739d-b973-4652-b5ae-9470d3876668"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5716,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f27841e0-d3b1-46e1-ab80-ca41d084d685",
      "title": "",
      "fullFile": "cypress/e2e/1-getting-started/todo.cy.js",
      "file": "cypress/e2e/1-getting-started/todo.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f6beaf8e-28a4-41de-9f6e-cef9de9a2925",
          "title": "example to-do app",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 1316,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2); // We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "5b2f9698-da8e-4b0a-b29a-84e9bb90b746",
              "parentUUID": "f6beaf8e-28a4-41de-9f6e-cef9de9a2925",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 932,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat'; // Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`); // Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "67e76251-ff6c-4ca7-807a-b3cc3b752e12",
              "parentUUID": "f6beaf8e-28a4-41de-9f6e-cef9de9a2925",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 579,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check(); // Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "30512b2d-b95c-4534-986d-2e2c899aaa1f",
              "parentUUID": "f6beaf8e-28a4-41de-9f6e-cef9de9a2925",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "efdc5d11-07a3-42a4-90fd-e39fbed2ac03",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 956,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click(); // After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog'); // For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "ff698fdb-0568-45b1-b8ff-0214c925281a",
                  "parentUUID": "efdc5d11-07a3-42a4-90fd-e39fbed2ac03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 860,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "8b933f13-1500-4ad4-b490-aa17ad83ba9e",
                  "parentUUID": "efdc5d11-07a3-42a4-90fd-e39fbed2ac03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 1013,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click(); // Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill'); // Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "41fd5974-7ca1-4442-87af-6ad36f8c9514",
                  "parentUUID": "efdc5d11-07a3-42a4-90fd-e39fbed2ac03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff698fdb-0568-45b1-b8ff-0214c925281a",
                "8b933f13-1500-4ad4-b490-aa17ad83ba9e",
                "41fd5974-7ca1-4442-87af-6ad36f8c9514"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2829,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "5b2f9698-da8e-4b0a-b29a-84e9bb90b746",
            "67e76251-ff6c-4ca7-807a-b3cc3b752e12",
            "30512b2d-b95c-4534-986d-2e2c899aaa1f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2827,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "8b8d4b31-ac61-49fd-b363-10cdf9543396",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/actions.cy.js",
      "file": "cypress/e2e/2-advanced-examples/actions.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cab48a99-a89c-4b94-ac2f-b564fcdc847e",
          "title": "Actions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".type() - type into a DOM element",
              "fullTitle": "Actions .type() - type into a DOM element",
              "timedOut": null,
              "duration": 5506,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/type\ncy.get('.action-email').type('fake@email.com').should('have.value', 'fake@email.com') // .type() with special character sequences\n.type('{leftarrow}{rightarrow}{uparrow}{downarrow}').type('{del}{selectall}{backspace}') // .type() with key modifiers\n.type('{alt}{option}') //these are equivalent\n.type('{ctrl}{control}') //these are equivalent\n.type('{meta}{command}{cmd}') //these are equivalent\n.type('{shift}') // Delay each keypress by 0.1 sec\n.type('slow.typing@email.com', {\n  delay: 100\n}).should('have.value', 'slow.typing@email.com');\ncy.get('.action-disabled') // Ignore error checking prior to type\n// like whether the input is visible or disabled\n.type('disabled error checking', {\n  force: true\n}).should('have.value', 'disabled error checking');",
              "err": {},
              "uuid": "32995330-2b66-4608-9289-b2e4e0b91f2c",
              "parentUUID": "cab48a99-a89c-4b94-ac2f-b564fcdc847e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".focus() - focus on a DOM element",
              "fullTitle": "Actions .focus() - focus on a DOM element",
              "timedOut": null,
              "duration": 564,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focus\ncy.get('.action-focus').focus().should('have.class', 'focus').prev().should('have.attr', 'style', 'color: orange;');",
              "err": {},
              "uuid": "4ee436fa-77de-42c0-a01b-0f8526f66ba7",
              "parentUUID": "cab48a99-a89c-4b94-ac2f-b564fcdc847e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".blur() - blur off a DOM element",
              "fullTitle": "Actions .blur() - blur off a DOM element",
              "timedOut": null,
              "duration": 1180,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blur\ncy.get('.action-blur').type('About to blur').blur().should('have.class', 'error').prev().should('have.attr', 'style', 'color: red;');",
              "err": {},
              "uuid": "59f52163-40f6-4d5f-b1f3-9141c90f77b2",
              "parentUUID": "cab48a99-a89c-4b94-ac2f-b564fcdc847e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".clear() - clears an input or textarea element",
              "fullTitle": "Actions .clear() - clears an input or textarea element",
              "timedOut": null,
              "duration": 1734,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clear\ncy.get('.action-clear').type('Clear this text').should('have.value', 'Clear this text').clear().should('have.value', '');",
              "err": {},
              "uuid": "8c853910-5ded-436f-b60c-79e14d59aa7d",
              "parentUUID": "cab48a99-a89c-4b94-ac2f-b564fcdc847e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".submit() - submit a form",
              "fullTitle": "Actions .submit() - submit a form",
              "timedOut": null,
              "duration": 1140,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/submit\ncy.get('.action-form').find('[type=\"text\"]').type('HALFOFF');\ncy.get('.action-form').submit().next().should('contain', 'Your form has been submitted!');",
              "err": {},
              "uuid": "f870300c-87fc-4366-9c66-99d5b076010e",
              "parentUUID": "cab48a99-a89c-4b94-ac2f-b564fcdc847e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".click() - click on a DOM element",
              "fullTitle": "Actions .click() - click on a DOM element",
              "timedOut": null,
              "duration": 5626,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/click\ncy.get('.action-btn').click(); // You can click on 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// clicking in the center of the element is the default\ncy.get('#action-canvas').click();\ncy.get('#action-canvas').click('topLeft');\ncy.get('#action-canvas').click('top');\ncy.get('#action-canvas').click('topRight');\ncy.get('#action-canvas').click('left');\ncy.get('#action-canvas').click('right');\ncy.get('#action-canvas').click('bottomLeft');\ncy.get('#action-canvas').click('bottom');\ncy.get('#action-canvas').click('bottomRight'); // .click() accepts an x and y coordinate\n// that controls where the click occurs :)\ncy.get('#action-canvas').click(80, 75) // click 80px on x coord and 75px on y coord\n.click(170, 75).click(80, 165).click(100, 185).click(125, 190).click(150, 185).click(170, 165); // click multiple elements by passing multiple: true\ncy.get('.action-labels>.label').click({\n  multiple: true\n}); // Ignore error checking prior to clicking\ncy.get('.action-opacity>.btn').click({\n  force: true\n});",
              "err": {},
              "uuid": "6bcf061f-5152-461b-8515-f8aaf0e396e4",
              "parentUUID": "cab48a99-a89c-4b94-ac2f-b564fcdc847e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".dblclick() - double click on a DOM element",
              "fullTitle": "Actions .dblclick() - double click on a DOM element",
              "timedOut": null,
              "duration": 775,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/dblclick\n// Our app has a listener on 'dblclick' event in our 'scripts.js'\n// that hides the div and shows an input on double click\ncy.get('.action-div').dblclick().should('not.be.visible');\ncy.get('.action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "ac894108-4b11-47db-bbaa-a2ec3f31bdbb",
              "parentUUID": "cab48a99-a89c-4b94-ac2f-b564fcdc847e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".rightclick() - right click on a DOM element",
              "fullTitle": "Actions .rightclick() - right click on a DOM element",
              "timedOut": null,
              "duration": 916,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/rightclick\n// Our app has a listener on 'contextmenu' event in our 'scripts.js'\n// that hides the div and shows an input on right click\ncy.get('.rightclick-action-div').rightclick().should('not.be.visible');\ncy.get('.rightclick-action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "01d46103-ef91-4936-971d-b983642be9e1",
              "parentUUID": "cab48a99-a89c-4b94-ac2f-b564fcdc847e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".check() - check a checkbox or radio element",
              "fullTitle": "Actions .check() - check a checkbox or radio element",
              "timedOut": null,
              "duration": 2491,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/check\n// By default, .check() will check all\n// matching checkbox or radio elements in succession, one after another\ncy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]').check().should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').not('[disabled]').check().should('be.checked'); // .check() accepts a value argument\ncy.get('.action-radios [type=\"radio\"]').check('radio1').should('be.checked'); // .check() accepts an array of values\ncy.get('.action-multiple-checkboxes [type=\"checkbox\"]').check(['checkbox1', 'checkbox2']).should('be.checked'); // Ignore error checking prior to checking\ncy.get('.action-checkboxes [disabled]').check({\n  force: true\n}).should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').check('radio3', {\n  force: true\n}).should('be.checked');",
              "err": {},
              "uuid": "cf146430-3859-46a8-92b7-d6eb9c5c09da",
              "parentUUID": "cab48a99-a89c-4b94-ac2f-b564fcdc847e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".uncheck() - uncheck a checkbox element",
              "fullTitle": "Actions .uncheck() - uncheck a checkbox element",
              "timedOut": null,
              "duration": 2739,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/uncheck\n// By default, .uncheck() will uncheck all matching\n// checkbox elements in succession, one after another\ncy.get('.action-check [type=\"checkbox\"]').not('[disabled]').uncheck().should('not.be.checked'); // .uncheck() accepts a value argument\ncy.get('.action-check [type=\"checkbox\"]').check('checkbox1').uncheck('checkbox1').should('not.be.checked'); // .uncheck() accepts an array of values\ncy.get('.action-check [type=\"checkbox\"]').check(['checkbox1', 'checkbox3']).uncheck(['checkbox1', 'checkbox3']).should('not.be.checked'); // Ignore error checking prior to unchecking\ncy.get('.action-check [disabled]').uncheck({\n  force: true\n}).should('not.be.checked');",
              "err": {},
              "uuid": "56ad5b02-b485-42ec-aaac-4e2380a82898",
              "parentUUID": "cab48a99-a89c-4b94-ac2f-b564fcdc847e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".select() - select an option in a <select> element",
              "fullTitle": "Actions .select() - select an option in a <select> element",
              "timedOut": null,
              "duration": 2034,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/select\n// at first, no option should be selected\ncy.get('.action-select').should('have.value', '--Select a fruit--'); // Select option(s) with matching text content\ncy.get('.action-select').select('apples'); // confirm the apples were selected\n// note that each value starts with \"fr-\" in our HTML\ncy.get('.action-select').should('have.value', 'fr-apples');\ncy.get('.action-select-multiple').select(['apples', 'oranges', 'bananas']) // when getting multiple values, invoke \"val\" method first\n.invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']); // Select option(s) with matching value\ncy.get('.action-select').select('fr-bananas') // can attach an assertion right away to the element\n.should('have.value', 'fr-bananas');\ncy.get('.action-select-multiple').select(['fr-apples', 'fr-oranges', 'fr-bananas']).invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']); // assert the selected values include oranges\ncy.get('.action-select-multiple').invoke('val').should('include', 'fr-oranges');",
              "err": {},
              "uuid": "64157a7f-b9cd-4485-ac1a-2559f8c994c5",
              "parentUUID": "cab48a99-a89c-4b94-ac2f-b564fcdc847e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".scrollIntoView() - scroll an element into view",
              "fullTitle": "Actions .scrollIntoView() - scroll an element into view",
              "timedOut": null,
              "duration": 778,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollintoview\n// normally all of these buttons are hidden,\n// because they're not within\n// the viewable area of their parent\n// (we need to scroll to see them)\ncy.get('#scroll-horizontal button').should('not.be.visible'); // scroll the button into view, as if the user had scrolled\ncy.get('#scroll-horizontal button').scrollIntoView().should('be.visible');\ncy.get('#scroll-vertical button').should('not.be.visible'); // Cypress handles the scroll direction needed\ncy.get('#scroll-vertical button').scrollIntoView().should('be.visible');\ncy.get('#scroll-both button').should('not.be.visible'); // Cypress knows to scroll to the right and down\ncy.get('#scroll-both button').scrollIntoView().should('be.visible');",
              "err": {},
              "uuid": "248994c4-ad26-419f-aa81-bd4b69819ed3",
              "parentUUID": "cab48a99-a89c-4b94-ac2f-b564fcdc847e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".trigger() - trigger an event on a DOM element",
              "fullTitle": "Actions .trigger() - trigger an event on a DOM element",
              "timedOut": null,
              "duration": 849,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/trigger\n// To interact with a range input (slider)\n// we need to set its value & trigger the\n// event to signal it changed\n// Here, we invoke jQuery's val() method to set\n// the value and trigger the 'change' event\ncy.get('.trigger-input-range').invoke('val', 25).trigger('change').get('input[type=range]').siblings('p').should('have.text', '25');",
              "err": {},
              "uuid": "255dee32-0ff1-43df-b491-3a091885542f",
              "parentUUID": "cab48a99-a89c-4b94-ac2f-b564fcdc847e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.scrollTo() - scroll the window or element to a position",
              "fullTitle": "Actions cy.scrollTo() - scroll the window or element to a position",
              "timedOut": null,
              "duration": 2856,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollto\n// You can scroll to 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// if you chain .scrollTo() off of cy, we will\n// scroll the entire window\ncy.scrollTo('bottom');\ncy.get('#scrollable-horizontal').scrollTo('right'); // or you can scroll to a specific coordinate:\n// (x axis, y axis) in pixels\ncy.get('#scrollable-vertical').scrollTo(250, 250); // or you can scroll to a specific percentage\n// of the (width, height) of the element\ncy.get('#scrollable-both').scrollTo('75%', '25%'); // control the easing of the scroll (default is 'swing')\ncy.get('#scrollable-vertical').scrollTo('center', {\n  easing: 'linear'\n}); // control the duration of the scroll (in ms)\ncy.get('#scrollable-both').scrollTo('center', {\n  duration: 2000\n});",
              "err": {},
              "uuid": "96a28c90-e316-4a9c-838e-4220b028f2e5",
              "parentUUID": "cab48a99-a89c-4b94-ac2f-b564fcdc847e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "32995330-2b66-4608-9289-b2e4e0b91f2c",
            "4ee436fa-77de-42c0-a01b-0f8526f66ba7",
            "59f52163-40f6-4d5f-b1f3-9141c90f77b2",
            "8c853910-5ded-436f-b60c-79e14d59aa7d",
            "f870300c-87fc-4366-9c66-99d5b076010e",
            "6bcf061f-5152-461b-8515-f8aaf0e396e4",
            "ac894108-4b11-47db-bbaa-a2ec3f31bdbb",
            "01d46103-ef91-4936-971d-b983642be9e1",
            "cf146430-3859-46a8-92b7-d6eb9c5c09da",
            "56ad5b02-b485-42ec-aaac-4e2380a82898",
            "64157a7f-b9cd-4485-ac1a-2559f8c994c5",
            "248994c4-ad26-419f-aa81-bd4b69819ed3",
            "255dee32-0ff1-43df-b491-3a091885542f",
            "96a28c90-e316-4a9c-838e-4220b028f2e5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 29188,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "cfc8c3d5-5c08-4ee4-99b8-9cddfef86c7b",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/aliasing.cy.js",
      "file": "cypress/e2e/2-advanced-examples/aliasing.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "73708452-3352-42e7-bc7a-e6fa85d186b0",
          "title": "Aliasing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".as() - alias a DOM element for later use",
              "fullTitle": "Aliasing .as() - alias a DOM element for later use",
              "timedOut": null,
              "duration": 1271,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/as\n// Alias a DOM element for use later\n// We don't have to traverse to the element\n// later in our code, we reference it with @\ncy.get('.as-table').find('tbody>tr').first().find('td').first().find('button').as('firstBtn'); // when we reference the alias, we place an\n// @ in front of its name\ncy.get('@firstBtn').click();\ncy.get('@firstBtn').should('have.class', 'btn-success').and('contain', 'Changed');",
              "err": {},
              "uuid": "98d1ec34-062a-4c11-ad14-4d1d5065574f",
              "parentUUID": "73708452-3352-42e7-bc7a-e6fa85d186b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".as() - alias a route for later use",
              "fullTitle": "Aliasing .as() - alias a route for later use",
              "timedOut": null,
              "duration": 1145,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Alias the route to wait for its response\ncy.intercept('GET', '**/comments/*').as('getComment'); // we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click(); // https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('eq', 200);",
              "err": {},
              "uuid": "ac0a706d-6768-4a69-b695-6313743f6e45",
              "parentUUID": "73708452-3352-42e7-bc7a-e6fa85d186b0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "98d1ec34-062a-4c11-ad14-4d1d5065574f",
            "ac0a706d-6768-4a69-b695-6313743f6e45"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2416,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9f85aecb-7901-4bd7-9514-7cc6d82b32e0",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/assertions.cy.js",
      "file": "cypress/e2e/2-advanced-examples/assertions.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "393ebfbb-309d-405b-b0a9-822431dcf834",
          "title": "Assertions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "58826454-7a58-4604-8bd0-f48bd83702ca",
              "title": "Implicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".should() - make an assertion about the current subject",
                  "fullTitle": "Assertions Implicit Assertions .should() - make an assertion about the current subject",
                  "timedOut": null,
                  "duration": 2100,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/should\ncy.get('.assertion-table').find('tbody tr:last').should('have.class', 'success').find('td').first() // checking the text of the <td> element in various ways\n.should('have.text', 'Column content').should('contain', 'Column content').should('have.html', 'Column content') // chai-jquery uses \"is()\" to check if element matches selector\n.should('match', 'td') // to match text content against a regular expression\n// first need to invoke jQuery method text()\n// and then match using regular expression\n.invoke('text').should('match', /column content/i); // a better way to check element's text content against a regular expression\n// is to use \"cy.contains\"\n// https://on.cypress.io/contains\ncy.get('.assertion-table').find('tbody tr:last') // finds first <td> element with text content matching regular expression\n.contains('td', /column content/i).should('be.visible'); // for more information about asserting element's text\n// see https://on.cypress.io/using-cypress-faq#How-do-I-get-an-element’s-text-contents",
                  "err": {},
                  "uuid": "c0c8b655-09ae-41f1-b2b1-0763ec035869",
                  "parentUUID": "58826454-7a58-4604-8bd0-f48bd83702ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": ".and() - chain multiple assertions together",
                  "fullTitle": "Assertions Implicit Assertions .and() - chain multiple assertions together",
                  "timedOut": null,
                  "duration": 1096,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/and\ncy.get('.assertions-link').should('have.class', 'active').and('have.attr', 'href').and('include', 'cypress.io');",
                  "err": {},
                  "uuid": "a979558e-d3da-441b-9200-e97c927b15fb",
                  "parentUUID": "58826454-7a58-4604-8bd0-f48bd83702ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0c8b655-09ae-41f1-b2b1-0763ec035869",
                "a979558e-d3da-441b-9200-e97c927b15fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3196,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "96895960-79aa-4b5b-9550-77903532f58a",
              "title": "Explicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "expect - make an assertion about a specified subject",
                  "fullTitle": "Assertions Explicit Assertions expect - make an assertion about a specified subject",
                  "timedOut": null,
                  "duration": 797,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can use Chai's BDD style assertions\nexpect(true).to.be.true;\nconst o = {\n  foo: 'bar'\n};\nexpect(o).to.equal(o);\nexpect(o).to.deep.equal({\n  foo: 'bar'\n}); // matching text using regular expression\nexpect('FooBar').to.match(/bar$/i);",
                  "err": {},
                  "uuid": "c25911f2-8f02-48d8-bb16-999967d295ad",
                  "parentUUID": "96895960-79aa-4b5b-9550-77903532f58a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "pass your own callback function to should()",
                  "fullTitle": "Assertions Explicit Assertions pass your own callback function to should()",
                  "timedOut": null,
                  "duration": 706,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Pass a function to should that can have any number\n// of explicit assertions within it.\n// The \".should(cb)\" function will be retried\n// automatically until it passes all your explicit assertions or times out.\ncy.get('.assertions-p').find('p').should($p => {\n  // https://on.cypress.io/$\n  // return an array of texts from all of the p's\n  const texts = $p.map((i, el) => Cypress.$(el).text()); // jquery map returns jquery object\n  // and .get() convert this to simple array\n  const paragraphs = texts.get(); // array should have length of 3\n  expect(paragraphs, 'has 3 paragraphs').to.have.length(3); // use second argument to expect(...) to provide clear\n  // message with each assertion\n  expect(paragraphs, 'has expected text in each paragraph').to.deep.eq(['Some text from first p', 'More text from second p', 'And even more text from third p']);\n});",
                  "err": {},
                  "uuid": "4703897f-d9e4-48e4-b317-b05e4c251e26",
                  "parentUUID": "96895960-79aa-4b5b-9550-77903532f58a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "finds element by class name regex",
                  "fullTitle": "Assertions Explicit Assertions finds element by class name regex",
                  "timedOut": null,
                  "duration": 775,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div') // .should(cb) callback function will be retried\n.should($div => {\n  expect($div).to.have.length(1);\n  const className = $div[0].className;\n  expect(className).to.match(/heading-/);\n}) // .then(cb) callback is not retried,\n// it either passes or fails\n.then($div => {\n  expect($div, 'text content').to.have.text('Introduction');\n});",
                  "err": {},
                  "uuid": "dccfb872-570b-4c15-9079-30f3d59a5e88",
                  "parentUUID": "96895960-79aa-4b5b-9550-77903532f58a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can throw any error",
                  "fullTitle": "Assertions Explicit Assertions can throw any error",
                  "timedOut": null,
                  "duration": 674,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div').should($div => {\n  if ($div.length !== 1) {\n    // you can throw your own errors\n    throw new Error('Did not find 1 element');\n  }\n  const className = $div[0].className;\n  if (!className.match(/heading-/)) {\n    throw new Error(`Could not find class \"heading-\" in ${className}`);\n  }\n});",
                  "err": {},
                  "uuid": "b7e08204-1103-4b7d-b870-4e58a3a576f1",
                  "parentUUID": "96895960-79aa-4b5b-9550-77903532f58a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "matches unknown text between two elements",
                  "fullTitle": "Assertions Explicit Assertions matches unknown text between two elements",
                  "timedOut": null,
                  "duration": 535,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/**\n * Text from the first element.\n * @type {string}\n*/\nlet text;\n/**\n * Normalizes passed text,\n * useful before comparing text with spaces and different capitalization.\n * @param {string} s Text to normalize\n*/\nconst normalizeText = s => s.replace(/\\s/g, '').toLowerCase();\ncy.get('.two-elements').find('.first').then($first => {\n  // save text from the first element\n  text = normalizeText($first.text());\n});\ncy.get('.two-elements').find('.second').should($div => {\n  // we can massage text before comparing\n  const secondText = normalizeText($div.text());\n  expect(secondText, 'second text').to.equal(text);\n});",
                  "err": {},
                  "uuid": "dc279b5f-c3fc-4704-8ce1-0712cb836940",
                  "parentUUID": "96895960-79aa-4b5b-9550-77903532f58a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "assert - assert shape of an object",
                  "fullTitle": "Assertions Explicit Assertions assert - assert shape of an object",
                  "timedOut": null,
                  "duration": 608,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const person = {\n  name: 'Joe',\n  age: 20\n};\nassert.isObject(person, 'value is object');",
                  "err": {},
                  "uuid": "d089486a-42e8-44b4-9aa7-e0c0be3191de",
                  "parentUUID": "96895960-79aa-4b5b-9550-77903532f58a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retries the should callback until assertions pass",
                  "fullTitle": "Assertions Explicit Assertions retries the should callback until assertions pass",
                  "timedOut": null,
                  "duration": 1921,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('#random-number').should($div => {\n  const n = parseFloat($div.text());\n  expect(n).to.be.gte(1).and.be.lte(10);\n});",
                  "err": {},
                  "uuid": "aab2d78d-c297-4fb8-8f24-009e8a71a97c",
                  "parentUUID": "96895960-79aa-4b5b-9550-77903532f58a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c25911f2-8f02-48d8-bb16-999967d295ad",
                "4703897f-d9e4-48e4-b317-b05e4c251e26",
                "dccfb872-570b-4c15-9079-30f3d59a5e88",
                "b7e08204-1103-4b7d-b870-4e58a3a576f1",
                "dc279b5f-c3fc-4704-8ce1-0712cb836940",
                "d089486a-42e8-44b4-9aa7-e0c0be3191de",
                "aab2d78d-c297-4fb8-8f24-009e8a71a97c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6016,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "270a85ed-4577-4e09-adbc-fc39a170b6d8",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/connectors.cy.js",
      "file": "cypress/e2e/2-advanced-examples/connectors.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e1909126-35e3-4846-bdf3-5eb4f86fe89c",
          "title": "Connectors",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".each() - iterate over an array of elements",
              "fullTitle": "Connectors .each() - iterate over an array of elements",
              "timedOut": null,
              "duration": 756,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/each\ncy.get('.connectors-each-ul>li').each(($el, index, $list) => {\n  console.log($el, index, $list);\n});",
              "err": {},
              "uuid": "5e801850-4648-4adc-8a48-7336d7250c4d",
              "parentUUID": "e1909126-35e3-4846-bdf3-5eb4f86fe89c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".its() - get properties on the current subject",
              "fullTitle": "Connectors .its() - get properties on the current subject",
              "timedOut": null,
              "duration": 556,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/its\ncy.get('.connectors-its-ul>li') // calls the 'length' property yielding that value\n.its('length').should('be.gt', 2);",
              "err": {},
              "uuid": "3ac0d881-0a4a-477a-b088-e8134cf005e1",
              "parentUUID": "e1909126-35e3-4846-bdf3-5eb4f86fe89c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".invoke() - invoke a function on the current subject",
              "fullTitle": "Connectors .invoke() - invoke a function on the current subject",
              "timedOut": null,
              "duration": 412,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// our div is hidden in our script.js\n// $('.connectors-div').hide()\ncy.get('.connectors-div').should('be.hidden'); // https://on.cypress.io/invoke\n// call the jquery method 'show' on the 'div.container'\ncy.get('.connectors-div').invoke('show');\ncy.get('.connectors-div').should('be.visible');",
              "err": {},
              "uuid": "88b005b7-e9b8-444b-986e-8ce73f7121a4",
              "parentUUID": "e1909126-35e3-4846-bdf3-5eb4f86fe89c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".spread() - spread an array as individual args to callback function",
              "fullTitle": "Connectors .spread() - spread an array as individual args to callback function",
              "timedOut": null,
              "duration": 422,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spread\nconst arr = ['foo', 'bar', 'baz'];\ncy.wrap(arr).spread((foo, bar, baz) => {\n  expect(foo).to.eq('foo');\n  expect(bar).to.eq('bar');\n  expect(baz).to.eq('baz');\n});",
              "err": {},
              "uuid": "c4bb9dae-20d5-468b-a991-b9181cf0ab37",
              "parentUUID": "e1909126-35e3-4846-bdf3-5eb4f86fe89c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "56ea7640-ed2e-4582-a3db-493ac67c1203",
              "title": ".then()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invokes a callback function with the current subject",
                  "fullTitle": "Connectors .then() invokes a callback function with the current subject",
                  "timedOut": null,
                  "duration": 616,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/then\ncy.get('.connectors-list > li').then($lis => {\n  expect($lis, '3 items').to.have.length(3);\n  expect($lis.eq(0), 'first item').to.contain('Walk the dog');\n  expect($lis.eq(1), 'second item').to.contain('Feed the cat');\n  expect($lis.eq(2), 'third item').to.contain('Write JavaScript');\n});",
                  "err": {},
                  "uuid": "ebf19e0e-235b-4e4a-9815-a4cdf4311640",
                  "parentUUID": "56ea7640-ed2e-4582-a3db-493ac67c1203",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the returned value to the next command",
                  "fullTitle": "Connectors .then() yields the returned value to the next command",
                  "timedOut": null,
                  "duration": 441,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  return 2;\n}).then(num => {\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "013d9712-7b8f-4458-8bf2-de6437b851c6",
                  "parentUUID": "56ea7640-ed2e-4582-a3db-493ac67c1203",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the original subject without return",
                  "fullTitle": "Connectors .then() yields the original subject without return",
                  "timedOut": null,
                  "duration": 496,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1); // note that nothing is returned from this callback\n}).then(num => {\n  // this callback receives the original unchanged value 1\n  expect(num).to.equal(1);\n});",
                  "err": {},
                  "uuid": "9fd8c224-b9e4-4ef8-8549-2795e877dbfa",
                  "parentUUID": "56ea7640-ed2e-4582-a3db-493ac67c1203",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the value yielded by the last Cypress command inside",
                  "fullTitle": "Connectors .then() yields the value yielded by the last Cypress command inside",
                  "timedOut": null,
                  "duration": 573,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1); // note how we run a Cypress command\n  // the result yielded by this Cypress command\n  // will be passed to the second \".then\"\n  cy.wrap(2);\n}).then(num => {\n  // this callback receives the value yielded by \"cy.wrap(2)\"\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "7388332f-7144-4a9a-be60-2d1879c4408a",
                  "parentUUID": "56ea7640-ed2e-4582-a3db-493ac67c1203",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ebf19e0e-235b-4e4a-9815-a4cdf4311640",
                "013d9712-7b8f-4458-8bf2-de6437b851c6",
                "9fd8c224-b9e4-4ef8-8549-2795e877dbfa",
                "7388332f-7144-4a9a-be60-2d1879c4408a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2126,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "5e801850-4648-4adc-8a48-7336d7250c4d",
            "3ac0d881-0a4a-477a-b088-e8134cf005e1",
            "88b005b7-e9b8-444b-986e-8ce73f7121a4",
            "c4bb9dae-20d5-468b-a991-b9181cf0ab37"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2146,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "14a97a1f-69ea-4aa7-9bb6-4bc51e0c31ae",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/cookies.cy.js",
      "file": "cypress/e2e/2-advanced-examples/cookies.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b3fff114-59ff-4370-b576-aae25ffe862f",
          "title": "Cookies",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.getCookie() - get a browser cookie",
              "fullTitle": "Cookies cy.getCookie() - get a browser cookie",
              "timedOut": null,
              "duration": 1942,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getcookie\ncy.get('#getCookie .set-a-cookie').click(); // cy.getCookie() yields a cookie object\ncy.getCookie('token').should('have.property', 'value', '123ABC');",
              "err": {},
              "uuid": "f4cb9400-b31b-4320-91a6-b377d04cf314",
              "parentUUID": "b3fff114-59ff-4370-b576-aae25ffe862f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getCookies() - get browser cookies for the current domain",
              "fullTitle": "Cookies cy.getCookies() - get browser cookies for the current domain",
              "timedOut": null,
              "duration": 1514,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getcookies\ncy.getCookies().should('be.empty');\ncy.get('#getCookies .set-a-cookie').click(); // cy.getCookies() yields an array of cookies\ncy.getCookies().should('have.length', 1).should(cookies => {\n  // each cookie has these properties\n  expect(cookies[0]).to.have.property('name', 'token');\n  expect(cookies[0]).to.have.property('value', '123ABC');\n  expect(cookies[0]).to.have.property('httpOnly', false);\n  expect(cookies[0]).to.have.property('secure', false);\n  expect(cookies[0]).to.have.property('domain');\n  expect(cookies[0]).to.have.property('path');\n});",
              "err": {},
              "uuid": "f7eb5348-8bdf-4981-aee7-b8036b819860",
              "parentUUID": "b3fff114-59ff-4370-b576-aae25ffe862f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllCookies() - get all browser cookies",
              "fullTitle": "Cookies cy.getAllCookies() - get all browser cookies",
              "timedOut": null,
              "duration": 1202,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getallcookies\ncy.getAllCookies().should('be.empty');\ncy.setCookie('key', 'value');\ncy.setCookie('key', 'value', {\n  domain: '.example.com'\n}); // cy.getAllCookies() yields an array of cookies\ncy.getAllCookies().should('have.length', 2).should(cookies => {\n  // each cookie has these properties\n  expect(cookies[0]).to.have.property('name', 'key');\n  expect(cookies[0]).to.have.property('value', 'value');\n  expect(cookies[0]).to.have.property('httpOnly', false);\n  expect(cookies[0]).to.have.property('secure', false);\n  expect(cookies[0]).to.have.property('domain');\n  expect(cookies[0]).to.have.property('path');\n  expect(cookies[1]).to.have.property('name', 'key');\n  expect(cookies[1]).to.have.property('value', 'value');\n  expect(cookies[1]).to.have.property('httpOnly', false);\n  expect(cookies[1]).to.have.property('secure', false);\n  expect(cookies[1]).to.have.property('domain', '.example.com');\n  expect(cookies[1]).to.have.property('path');\n});",
              "err": {},
              "uuid": "e54e8baf-d6f8-4257-8722-fb563753af96",
              "parentUUID": "b3fff114-59ff-4370-b576-aae25ffe862f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.setCookie() - set a browser cookie",
              "fullTitle": "Cookies cy.setCookie() - set a browser cookie",
              "timedOut": null,
              "duration": 1110,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/setcookie\ncy.getCookies().should('be.empty');\ncy.setCookie('foo', 'bar'); // cy.getCookie() yields a cookie object\ncy.getCookie('foo').should('have.property', 'value', 'bar');",
              "err": {},
              "uuid": "c9d19f31-da14-44a4-a7b0-dfa1af0467a9",
              "parentUUID": "b3fff114-59ff-4370-b576-aae25ffe862f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearCookie() - clear a browser cookie",
              "fullTitle": "Cookies cy.clearCookie() - clear a browser cookie",
              "timedOut": null,
              "duration": 1336,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearcookie\ncy.getCookie('token').should('be.null');\ncy.get('#clearCookie .set-a-cookie').click();\ncy.getCookie('token').should('have.property', 'value', '123ABC'); // cy.clearCookies() yields null\ncy.clearCookie('token').should('be.null');\ncy.getCookie('token').should('be.null');",
              "err": {},
              "uuid": "d71583c3-6461-4a54-b59f-f55f05d64386",
              "parentUUID": "b3fff114-59ff-4370-b576-aae25ffe862f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearCookies() - clear browser cookies for the current domain",
              "fullTitle": "Cookies cy.clearCookies() - clear browser cookies for the current domain",
              "timedOut": null,
              "duration": 1402,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearcookies\ncy.getCookies().should('be.empty');\ncy.get('#clearCookies .set-a-cookie').click();\ncy.getCookies().should('have.length', 1); // cy.clearCookies() yields null\ncy.clearCookies();\ncy.getCookies().should('be.empty');",
              "err": {},
              "uuid": "b5e6459b-1221-4d28-939d-fe703cfde3f7",
              "parentUUID": "b3fff114-59ff-4370-b576-aae25ffe862f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllCookies() - clear all browser cookies",
              "fullTitle": "Cookies cy.clearAllCookies() - clear all browser cookies",
              "timedOut": null,
              "duration": 1011,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearallcookies\ncy.getAllCookies().should('be.empty');\ncy.setCookie('key', 'value');\ncy.setCookie('key', 'value', {\n  domain: '.example.com'\n});\ncy.getAllCookies().should('have.length', 2); // cy.clearAllCookies() yields null\ncy.clearAllCookies();\ncy.getAllCookies().should('be.empty');",
              "err": {},
              "uuid": "d767604d-8408-4382-b7ba-fa62d9569c7c",
              "parentUUID": "b3fff114-59ff-4370-b576-aae25ffe862f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f4cb9400-b31b-4320-91a6-b377d04cf314",
            "f7eb5348-8bdf-4981-aee7-b8036b819860",
            "e54e8baf-d6f8-4257-8722-fb563753af96",
            "c9d19f31-da14-44a4-a7b0-dfa1af0467a9",
            "d71583c3-6461-4a54-b59f-f55f05d64386",
            "b5e6459b-1221-4d28-939d-fe703cfde3f7",
            "d767604d-8408-4382-b7ba-fa62d9569c7c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9517,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0892f21a-6622-415d-9869-70fd3fd42b4f",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/cypress_api.cy.js",
      "file": "cypress/e2e/2-advanced-examples/cypress_api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f6a38c43-d921-4c90-8624-07e16677b85f",
          "title": "Cypress.Commands",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".add() - create a custom command",
              "fullTitle": "Cypress.Commands .add() - create a custom command",
              "timedOut": null,
              "duration": 768,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Cypress.Commands.add('console', {\n  prevSubject: true\n}, (subject, method) => {\n  // the previous subject is automatically received\n  // and the commands arguments are shifted\n  // allow us to change the console method used\n  method = method || 'log'; // log the subject to the console\n  console[method]('The subject is', subject); // whatever we return becomes the new subject\n  // we don't want to change the subject so\n  // we return whatever was passed in\n  return subject;\n});\ncy.get('button').console('info').then($button => {// subject is still $button\n});",
              "err": {},
              "uuid": "dd8af828-cd4e-40ad-8819-ee287f8d9715",
              "parentUUID": "f6a38c43-d921-4c90-8624-07e16677b85f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dd8af828-cd4e-40ad-8819-ee287f8d9715"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 768,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "64002dc0-ebaa-4bb0-a417-dbe31d79410d",
          "title": "Cypress.Cookies",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".debug() - enable or disable debugging",
              "fullTitle": "Cypress.Cookies .debug() - enable or disable debugging",
              "timedOut": null,
              "duration": 469,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Cypress.Cookies.debug(true); // Cypress will now log in the console when\n// cookies are set or cleared\ncy.setCookie('fakeCookie', '123ABC');\ncy.clearCookie('fakeCookie');\ncy.setCookie('fakeCookie', '123ABC');\ncy.clearCookie('fakeCookie');\ncy.setCookie('fakeCookie', '123ABC');",
              "err": {},
              "uuid": "918fcaa6-7ac0-49cf-99c1-d1cfa868680a",
              "parentUUID": "64002dc0-ebaa-4bb0-a417-dbe31d79410d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "918fcaa6-7ac0-49cf-99c1-d1cfa868680a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 469,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1b6b0905-60af-4bf3-ac04-3219685d19bd",
          "title": "Cypress.arch",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get CPU architecture name of underlying OS",
              "fullTitle": "Cypress.arch Get CPU architecture name of underlying OS",
              "timedOut": null,
              "duration": 446,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/arch\nexpect(Cypress.arch).to.exist;",
              "err": {},
              "uuid": "6f64cb37-57ef-44af-9c4e-71663133887d",
              "parentUUID": "1b6b0905-60af-4bf3-ac04-3219685d19bd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6f64cb37-57ef-44af-9c4e-71663133887d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 446,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "57c84c61-5cd5-4d85-9a7c-3438108a78bb",
          "title": "Cypress.config()",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get and set configuration options",
              "fullTitle": "Cypress.config() Get and set configuration options",
              "timedOut": null,
              "duration": 1168,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/config\nlet myConfig = Cypress.config();\nexpect(myConfig).to.have.property('animationDistanceThreshold', 5);\nexpect(myConfig).to.have.property('baseUrl', null);\nexpect(myConfig).to.have.property('defaultCommandTimeout', 4000);\nexpect(myConfig).to.have.property('requestTimeout', 5000);\nexpect(myConfig).to.have.property('responseTimeout', 30000);\nexpect(myConfig).to.have.property('viewportHeight', 660);\nexpect(myConfig).to.have.property('viewportWidth', 1000);\nexpect(myConfig).to.have.property('pageLoadTimeout', 60000);\nexpect(myConfig).to.have.property('waitForAnimations', true);\nexpect(Cypress.config('pageLoadTimeout')).to.eq(60000); // this will change the config for the rest of your tests!\nCypress.config('pageLoadTimeout', 20000);\nexpect(Cypress.config('pageLoadTimeout')).to.eq(20000);\nCypress.config('pageLoadTimeout', 60000);",
              "err": {
                "message": "AssertionError: expected { Object (configFile, reporter, ...) } to have property 'baseUrl' of null, but got 'https://conduit-app.ksenijazlatic.com/'",
                "estack": "AssertionError: expected { Object (configFile, reporter, ...) } to have property 'baseUrl' of null, but got 'https://conduit-app.ksenijazlatic.com/'\n    at Context.eval (webpack:///./cypress/e2e/2-advanced-examples/cypress_api.cy.js:75:29)",
                "diff": null
              },
              "uuid": "d40af4e2-c50c-41bf-8db9-e74be1bd3810",
              "parentUUID": "57c84c61-5cd5-4d85-9a7c-3438108a78bb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d40af4e2-c50c-41bf-8db9-e74be1bd3810"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1168,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "36ac3524-4924-41b3-a463-6f52e1603b0b",
          "title": "Cypress.dom",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".isHidden() - determine if a DOM element is hidden",
              "fullTitle": "Cypress.dom .isHidden() - determine if a DOM element is hidden",
              "timedOut": null,
              "duration": 593,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let hiddenP = Cypress.$('.dom-p p.hidden').get(0);\nlet visibleP = Cypress.$('.dom-p p.visible').get(0); // our first paragraph has css class 'hidden'\nexpect(Cypress.dom.isHidden(hiddenP)).to.be.true;\nexpect(Cypress.dom.isHidden(visibleP)).to.be.false;",
              "err": {},
              "uuid": "06d1a277-cd07-49fd-99bf-9e5083d27be1",
              "parentUUID": "36ac3524-4924-41b3-a463-6f52e1603b0b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "06d1a277-cd07-49fd-99bf-9e5083d27be1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 593,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b800094d-d826-4c39-ac02-f14588571cc4",
          "title": "Cypress.env()",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get environment variables",
              "fullTitle": "Cypress.env() Get environment variables",
              "timedOut": null,
              "duration": 548,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/env\n// set multiple environment variables\nCypress.env({\n  host: 'veronica.dev.local',\n  api_server: 'http://localhost:8888/v1/'\n}); // get environment variable\nexpect(Cypress.env('host')).to.eq('veronica.dev.local'); // set environment variable\nCypress.env('api_server', 'http://localhost:8888/v2/');\nexpect(Cypress.env('api_server')).to.eq('http://localhost:8888/v2/'); // get all environment variable\nexpect(Cypress.env()).to.have.property('host', 'veronica.dev.local');\nexpect(Cypress.env()).to.have.property('api_server', 'http://localhost:8888/v2/');",
              "err": {},
              "uuid": "143d6178-1d91-4954-8b36-af200a8550d4",
              "parentUUID": "b800094d-d826-4c39-ac02-f14588571cc4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "143d6178-1d91-4954-8b36-af200a8550d4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 548,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7757b387-5213-4259-8aa9-f67f27573fa0",
          "title": "Cypress.log",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Control what is printed to the Command Log",
              "fullTitle": "Cypress.log Control what is printed to the Command Log",
              "timedOut": null,
              "duration": 601,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/cypress-log",
              "err": {},
              "uuid": "feb1a459-6dea-4abf-9664-711179cd9e47",
              "parentUUID": "7757b387-5213-4259-8aa9-f67f27573fa0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "feb1a459-6dea-4abf-9664-711179cd9e47"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 601,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c167cc2a-bb8a-4ea4-b045-416c0c2a31b3",
          "title": "Cypress.platform",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get underlying OS name",
              "fullTitle": "Cypress.platform Get underlying OS name",
              "timedOut": null,
              "duration": 536,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/platform\nexpect(Cypress.platform).to.be.exist;",
              "err": {},
              "uuid": "9415f461-edee-47d2-840d-d21148d57333",
              "parentUUID": "c167cc2a-bb8a-4ea4-b045-416c0c2a31b3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9415f461-edee-47d2-840d-d21148d57333"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 536,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "26f660d9-40e5-4f5e-9db3-fede4353da16",
          "title": "Cypress.version",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get current version of Cypress being run",
              "fullTitle": "Cypress.version Get current version of Cypress being run",
              "timedOut": null,
              "duration": 541,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/version\nexpect(Cypress.version).to.be.exist;",
              "err": {},
              "uuid": "77a12bda-a7a7-4c9f-a5db-01055d3393f0",
              "parentUUID": "26f660d9-40e5-4f5e-9db3-fede4353da16",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "77a12bda-a7a7-4c9f-a5db-01055d3393f0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 541,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5b977619-96cf-431d-8074-6b09df297ceb",
          "title": "Cypress.spec",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get current spec information",
              "fullTitle": "Cypress.spec Get current spec information",
              "timedOut": null,
              "duration": 541,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spec\n// wrap the object so we can inspect it easily by clicking in the command log\ncy.wrap(Cypress.spec).should('include.keys', ['name', 'relative', 'absolute']);",
              "err": {},
              "uuid": "7ef523f2-29ac-4887-8f69-cdfaf7120fb1",
              "parentUUID": "5b977619-96cf-431d-8074-6b09df297ceb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7ef523f2-29ac-4887-8f69-cdfaf7120fb1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 541,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "cb46b46b-5bbf-4099-b612-0192b598b008",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/files.cy.js",
      "file": "cypress/e2e/2-advanced-examples/files.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f0ab145c-2c4c-42ea-a1bb-5d0a212df33e",
          "title": "Files",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.fixture() - load a fixture",
              "fullTitle": "Files cy.fixture() - load a fixture",
              "timedOut": null,
              "duration": 1210,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/fixture\n// Instead of writing a response inline you can\n// use a fixture file's content.\n// when application makes an Ajax request matching \"GET **/comments/*\"\n// Cypress will intercept it and reply with the object in `example.json` fixture\ncy.intercept('GET', '**/comments/*', {\n  fixture: 'example.json'\n}).as('getComment'); // we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.fixture-btn').click();\ncy.wait('@getComment').its('response.body').should('have.property', 'name').and('include', 'Using fixtures to represent data');",
              "err": {},
              "uuid": "9b6c5005-bb12-40b0-b8bf-196e0628d848",
              "parentUUID": "f0ab145c-2c4c-42ea-a1bb-5d0a212df33e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.fixture() or require - load a fixture",
              "fullTitle": "Files cy.fixture() or require - load a fixture",
              "timedOut": null,
              "duration": 597,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// we are inside the \"function () { ... }\"\n// callback and can use test context object \"this\"\n// \"this.example\" was loaded in \"beforeEach\" function callback\nexpect(this.example, 'fixture in the test context').to.deep.equal(requiredExample); // or use \"cy.wrap\" and \"should('deep.equal', ...)\" assertion\ncy.wrap(this.example).should('deep.equal', requiredExample);",
              "err": {},
              "uuid": "bef3e09b-9fc1-4bb6-8e27-b2f1e7d267e0",
              "parentUUID": "f0ab145c-2c4c-42ea-a1bb-5d0a212df33e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.readFile() - read file contents",
              "fullTitle": "Files cy.readFile() - read file contents",
              "timedOut": null,
              "duration": 763,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/readfile\n// You can read a file and yield its contents\n// The filePath is relative to your project's root.\ncy.readFile(Cypress.config('configFile')).then(config => {\n  expect(config).to.be.an('string');\n});",
              "err": {},
              "uuid": "f7de46ee-b943-4bda-90a9-0029bec30df4",
              "parentUUID": "f0ab145c-2c4c-42ea-a1bb-5d0a212df33e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.writeFile() - write to a file",
              "fullTitle": "Files cy.writeFile() - write to a file",
              "timedOut": null,
              "duration": 1432,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/writefile\n// You can write to a file\n// Use a response from a request to automatically\n// generate a fixture file for use later\ncy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n  cy.writeFile('cypress/fixtures/users.json', response.body);\n});\ncy.fixture('users').should(users => {\n  expect(users[0].name).to.exist;\n}); // JavaScript arrays and objects are stringified\n// and formatted into text.\ncy.writeFile('cypress/fixtures/profile.json', {\n  id: 8739,\n  name: 'Jane',\n  email: 'jane@example.com'\n});\ncy.fixture('profile').should(profile => {\n  expect(profile.name).to.eq('Jane');\n});",
              "err": {},
              "uuid": "f0818c4d-34c1-426a-babe-99d394e8d49f",
              "parentUUID": "f0ab145c-2c4c-42ea-a1bb-5d0a212df33e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9b6c5005-bb12-40b0-b8bf-196e0628d848",
            "bef3e09b-9fc1-4bb6-8e27-b2f1e7d267e0",
            "f7de46ee-b943-4bda-90a9-0029bec30df4",
            "f0818c4d-34c1-426a-babe-99d394e8d49f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4002,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e3c67d4f-443f-4c66-8841-8ad5033a9ef0",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/location.cy.js",
      "file": "cypress/e2e/2-advanced-examples/location.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f0beac6c-c392-40f9-90be-12f0e1d3ba41",
          "title": "Location",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.hash() - get the current URL hash",
              "fullTitle": "Location cy.hash() - get the current URL hash",
              "timedOut": null,
              "duration": 748,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/hash\ncy.hash().should('be.empty');",
              "err": {},
              "uuid": "74419ad9-5a69-4d7d-8065-75f4076680ef",
              "parentUUID": "f0beac6c-c392-40f9-90be-12f0e1d3ba41",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.location() - get window.location",
              "fullTitle": "Location cy.location() - get window.location",
              "timedOut": null,
              "duration": 395,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/location\ncy.location().should(location => {\n  expect(location.hash).to.be.empty;\n  expect(location.href).to.eq('https://example.cypress.io/commands/location');\n  expect(location.host).to.eq('example.cypress.io');\n  expect(location.hostname).to.eq('example.cypress.io');\n  expect(location.origin).to.eq('https://example.cypress.io');\n  expect(location.pathname).to.eq('/commands/location');\n  expect(location.port).to.eq('');\n  expect(location.protocol).to.eq('https:');\n  expect(location.search).to.be.empty;\n});",
              "err": {},
              "uuid": "2cd05d12-5608-42b2-b83c-1c3b347d2fce",
              "parentUUID": "f0beac6c-c392-40f9-90be-12f0e1d3ba41",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.url() - get the current URL",
              "fullTitle": "Location cy.url() - get the current URL",
              "timedOut": null,
              "duration": 433,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/url\ncy.url().should('eq', 'https://example.cypress.io/commands/location');",
              "err": {},
              "uuid": "171654d3-c775-4bf9-acf5-1be8658f23e0",
              "parentUUID": "f0beac6c-c392-40f9-90be-12f0e1d3ba41",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "74419ad9-5a69-4d7d-8065-75f4076680ef",
            "2cd05d12-5608-42b2-b83c-1c3b347d2fce",
            "171654d3-c775-4bf9-acf5-1be8658f23e0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1576,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "600b6d7d-683a-47dc-9de2-fbd75d716564",
      "title": "",
      "fullFile": "cypress/e2e/1-getting-started/homePage.cy.js",
      "file": "cypress/e2e/1-getting-started/homePage.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6e75f21f-db05-430f-9834-8d05dcdd39e2",
          "title": "Login Page tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Global feed test",
              "fullTitle": "Login Page tests Global feed test",
              "timedOut": null,
              "duration": 8200,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.intercept('GET', '/api/articles/feed*', {\n  \"articles\": [],\n  \"articlesCount\": 0\n});\ncy.intercept('GET', '/api/articles*', {\n  fixture: 'articles.json'\n}).as('artList');\n_homePage.homePage.globalFeedBtn.click();\ncy.get('app-article-list button').then(heartList => {\n  expect(heartList[0]).to.contain('1');\n  expect(heartList[1]).to.contain('5');\n});\ncy.fixture('articles').then(file => {\n  const artLink = file.articles[1].slug;\n  file.articles[1].favoritesCount = 6;\n  cy.intercept('POST', '/api/articles/' + artLink + '/favorite', file);\n});\ncy.get('app-article-list button').eq(1).click().should('contain', '6');",
              "err": {},
              "uuid": "fdb813b2-368e-462f-bde4-5207662a28d2",
              "parentUUID": "6e75f21f-db05-430f-9834-8d05dcdd39e2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fdb813b2-368e-462f-bde4-5207662a28d2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8200,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}